openapi: 3.0.3
info:
  title: Reya DEX Trading API v2
  version: 2.0.6
  contact:
    name: Reya Network
    url: https://reya.xyz
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.reya.xyz/v2
    description: Production server
  - url: https://api-test.reya.xyz/v2
    description: Testnet server

paths:
  /openapi-spec.yaml:
    get:
      summary: Get OpenAPI specification
      description: Returns the complete OpenAPI specification for this API in YAML format
      operationId: getOpenApiSpec
      tags:
        - Specs
      responses:
        '200':
          description: OpenAPI specification in YAML format
          content:
            application/yaml:
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/InternalServerError'

  /asyncapi-spec.yaml:
    get:
      summary: Get AsyncAPI specification
      description: Returns the complete AsyncAPI specification for WebSocket API in YAML format
      operationId: getAsyncApiSpec
      tags:
        - Specs
      responses:
        '200':
          description: AsyncAPI specification in YAML format
          content:
            application/yaml:
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/InternalServerError'

  /marketDefinitions:
    get:
      summary: Get market definitions
      operationId: getMarketDefinitions
      tags:
        - Reference Data
      responses:
        '200':
          description: List of market definitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketDefinition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /assetDefinitions:
    get:
      summary: Get asset definitions
      operationId: getAssetDefinitions
      tags:
        - Reference Data
      responses:
        '200':
          description: List of asset definitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetDefinition'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /liquidityParameters:
    get:
      summary: Get liquidity parameters
      operationId: getLiquidityParameters
      tags:
        - Reference Data
      responses:
        '200':
          description: List of liquidity parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiquidityParameters'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /globalFeeParameters:
    get:
      summary: Get global fee parameters
      operationId: getGlobalFeeParameters
      tags:
        - Reference Data
      responses:
        '200':
          description: Global fee parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalFeeParameters'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /feeTiers:
    get:
      summary: Get fee tiers
      operationId: getFeeTierParameters
      tags:
        - Reference Data
      responses:
        '200':
          description: List of fee tier parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeeTierParameters'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /markets/summary:
    get:
      summary: Get market summaries
      description: Statistics and throttled market data for all markets. Recalculated every 0.5s
      operationId: getMarketsSummary
      tags:
        - Market Data
      responses:
        '200':
          description: List of market summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /market/{symbol}/summary:
    get:
      summary: Get market summary
      description: Statistics and throttled data for a specific market. Recalculated every 0.5s
      operationId: getMarketSummary
      tags:
        - Market Data
      parameters:
        - $ref: '#/components/parameters/SymbolParam'
      responses:
        '200':
          description: Market summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /prices:
    get:
      summary: Get all prices
      operationId: getPrices
      tags:
        - Market Data
      responses:
        '200':
          description: List of prices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /prices/{symbol}:
    get:
      summary: Get price by symbol
      operationId: getPrice
      tags:
        - Market Data
      parameters:
        - $ref: '#/components/parameters/SymbolParam'
      responses:
        '200':
          description: Price information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /market/{symbol}/perpExecutions:
    get:
      summary: Get perp executions for market
      description: Returns up to 100 perp executions for a given market.
      operationId: getMarketPerpExecutions
      tags:
        - Market Data
      parameters:
        - $ref: '#/components/parameters/SymbolParam'
        - $ref: '#/components/parameters/StartTimeParam'
        - $ref: '#/components/parameters/EndTimeParam'
      responses:
        '200':
          description: List of perp executions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerpExecutionList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /market/{symbol}/depth:
    get:
      summary: Get market depth snapshot
      description: Returns an L2 order book snapshot with aggregated price levels for the specified market.
      operationId: getMarketDepth
      tags:
        - Market Data
      parameters:
        - $ref: '#/components/parameters/SymbolParam'
        - $ref: '#/components/parameters/DepthParam'
      responses:  
        '200':
          description: Depth snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depth'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /candleHistory/{symbol}/{resolution}:
    get:
      summary: Get historical candles
      description: Returns up to 200 candles for a given market, sorted by time in descending order, and ending at the specified end time.
      operationId: getCandles
      tags:
        - Market Data
      parameters:
        - $ref: '#/components/parameters/SymbolParam'
        - $ref: '#/components/parameters/ResolutionParam'
        - $ref: '#/components/parameters/EndTimeParam'
      responses:
        '200':
          description: Historical candle data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandleHistoryData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/accounts:
    get:
      summary: Get wallet accounts
      operationId: getWalletAccounts
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/perpExecutions:
    get:
      summary: Get wallet perp executions
      description: Returns up to 100 perp executions for a given wallet.
      operationId: getWalletPerpExecutions
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
        - $ref: '#/components/parameters/StartTimeParam'
        - $ref: '#/components/parameters/EndTimeParam'
      responses:
        '200':
          description: List of perpetual executions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerpExecutionList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/spotExecutions:
    get:
      summary: Get wallet spot executions
      description: Returns up to 100 spot executions for a given wallet.
      operationId: getWalletSpotExecutions
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
        - $ref: '#/components/parameters/StartTimeParam'
        - $ref: '#/components/parameters/EndTimeParam'
      responses:
        '200':
          description: List of spot executions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotExecutionList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/positions:
    get:
      summary: Get wallet positions
      operationId: getWalletPositions
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
      responses:
        '200':
          description: List of positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Position'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/accountBalances:
    get:
      summary: Get wallet account balances
      description: Returns all account real balances for a wallet.
      operationId: getWalletAccountBalances
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
      responses:
        '200':
          description: List of account balances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/openOrders:
    get:
      summary: Get wallet open orders
      description: Returns all pending orders for a wallet.
      operationId: getWalletOpenOrders
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
      responses:
        '200':
          description: List of open orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/{address}/configuration:
    get:
      summary: Get wallet configuration
      description: Returns trading configuration for a wallet
      operationId: getWalletConfiguration
      tags:
        - Wallet Data
      parameters:
        - $ref: '#/components/parameters/AddressParam'
      responses:
        '200':
          description: Wallet configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletConfiguration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /createOrder:
    post:
      summary: Create order
      description: Create a new order (IOC, GTC, SL, TP)
      operationId: createOrder
      tags:
        - Order Entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Order creation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cancelOrder:
    post:
      summary: Cancel order
      description: Cancel an existing order
      operationId: cancelOrder
      tags:
        - Order Entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
      responses:
        '200':
          description: Order cancellation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    SymbolParam:
      name: symbol
      in: path
      required: true
      description: Trading symbol (e.g., BTCRUSDPERP)
      schema:
        $ref: './trading-schemas.json#/definitions/Symbol'
        example: BTCRUSDPERP

    AddressParam:
      name: address
      in: path
      required: true
      schema:
        $ref: './trading-schemas.json#/definitions/Address'
        example: '0x6c51275fd01d5dbd2da194e92f920f8598306df2'

    StartTimeParam:
      name: startTime
      in: query
      required: false
      description: Return results after this sequence number (for pagination)
      schema:
        $ref: './trading-schemas.json#/definitions/UnsignedInteger'
        example: 1756733379000

    EndTimeParam:
      name: endTime
      in: query
      required: false
      description: Return results before this sequence number (for pagination)
      schema:
        $ref: './trading-schemas.json#/definitions/UnsignedInteger'
        example: 1756733679000

    DepthParam:
      name: depth
      in: query
      required: false
      description: Number of price levels to return per side (bids and asks)
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 100
        example: 10

    ResolutionParam:
      name: resolution
      in: path
      required: true
      description: Candle resolution
      schema:
        type: string
        enum: ['1m', '5m', '15m', '30m', '1h', '4h', '1d']
        example: '1m'

  schemas:
    RequestError:
      $ref: './trading-schemas.json#/definitions/RequestError'

    ServerError:
      $ref: './trading-schemas.json#/definitions/ServerError'

    MarketDefinition:
      $ref: './trading-schemas.json#/definitions/MarketDefinition'

    AssetDefinition:
      $ref: './trading-schemas.json#/definitions/AssetDefinition'

    FeeTierParameters:
      $ref: './trading-schemas.json#/definitions/FeeTierParameters'

    GlobalFeeParameters:
      $ref: './trading-schemas.json#/definitions/GlobalFeeParameters'

    LiquidityParameters:
      $ref: './trading-schemas.json#/definitions/LiquidityParameters'

    WalletConfiguration:
      $ref: './trading-schemas.json#/definitions/WalletConfiguration'

    MarketSummary:
      $ref: './trading-schemas.json#/definitions/MarketSummary'

    Position:
      $ref: './trading-schemas.json#/definitions/Position'

    Order:
      $ref: './trading-schemas.json#/definitions/Order'

    Account:
      $ref: './trading-schemas.json#/definitions/Account'

    AccountBalance:
      $ref: './trading-schemas.json#/definitions/AccountBalance'

    PerpExecutionList:
      $ref: './trading-schemas.json#/definitions/PerpExecutionList'

    SpotExecutionList:
      $ref: './trading-schemas.json#/definitions/SpotExecutionList'

    Price:
      $ref: './trading-schemas.json#/definitions/Price'

    CandleHistoryData:
      $ref: './trading-schemas.json#/definitions/CandleHistoryData'

    CreateOrderRequest:
      $ref: './trading-schemas.json#/definitions/CreateOrderRequest'

    CreateOrderResponse:
      $ref: './trading-schemas.json#/definitions/CreateOrderResponse'

    CancelOrderRequest:
      $ref: './trading-schemas.json#/definitions/CancelOrderRequest'

    CancelOrderResponse:
      $ref: './trading-schemas.json#/definitions/CancelOrderResponse'

    # Depth Schemas
    Level:
      $ref: './trading-schemas.json#/definitions/Level'

    Depth:
      $ref: './trading-schemas.json#/definitions/Depth'

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestError'
          example:
            error: INPUT_VALIDATION_ERROR
            message: Invalid request parameters

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'
          example:
            error: INTERNAL_SERVER_ERROR
            message: An unexpected error occurred

tags:
  - name: Specs
    description: OpenAPI and AsyncAPI specs
  - name: Reference Data
    description: Market definitions, global parameters, liquidity parameters, etc.
  - name: Market Data
    description: Prices, market-level trades, depth, candles, etc.
  - name: Wallet Data
    description: Accounts, positions, trades, etc.
  - name: Order Entry
    description: Order entry operations